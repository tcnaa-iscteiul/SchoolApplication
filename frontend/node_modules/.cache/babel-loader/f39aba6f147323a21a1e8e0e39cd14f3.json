{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier, Watermark } from '@mui/x-license-pro';\nimport { chainPropTypes } from '@mui/utils';\nimport { GridBody, GridErrorHandler, GridFooterPlaceholder, GridHeaderPlaceholder, GridRoot, GridContextProvider } from '@mui/x-data-grid-pro';\nimport { DataGridProVirtualScroller, DataGridProColumnHeaders } from '@mui/x-data-grid-pro/internals';\nimport { useDataGridPremiumComponent } from './useDataGridPremiumComponent';\nimport { useDataGridPremiumProps } from './useDataGridPremiumProps';\nimport { getReleaseInfo } from '../utils/releaseInfo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\nconst DataGridPremiumRaw = /*#__PURE__*/React.forwardRef(function DataGridPremium(inProps, ref) {\n  const props = useDataGridPremiumProps(inProps);\n  const apiRef = useDataGridPremiumComponent(props.apiRef, props);\n  useLicenseVerifier('x-data-grid-premium', releaseInfo);\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    apiRef: apiRef,\n    props: props,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref,\n      children: /*#__PURE__*/_jsxs(GridErrorHandler, {\n        children: [/*#__PURE__*/_jsx(GridHeaderPlaceholder, {}), /*#__PURE__*/_jsx(GridBody, {\n          ColumnHeadersComponent: DataGridProColumnHeaders,\n          VirtualScrollerComponent: DataGridProVirtualScroller,\n          children: /*#__PURE__*/_jsx(Watermark, {\n            packageName: \"x-data-grid-premium\",\n            releaseInfo: releaseInfo\n          })\n        }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n      })\n    })\n  });\n});\nexport const DataGridPremium = /*#__PURE__*/React.memo(DataGridPremiumRaw);\nprocess.env.NODE_ENV !== \"production\" ? DataGridPremiumRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Aggregation functions available on the grid.\n   * @default GRID_AGGREGATION_FUNCTIONS\n   */\n  aggregationFunctions: PropTypes.object,\n\n  /**\n   * Set the aggregation model of the grid.\n   */\n  aggregationModel: PropTypes.object,\n\n  /**\n   * Rows used to generate the aggregated value.\n   * If `filtered`, the aggregated values will be generated using only the rows currently passing the filtering process.\n   * If `all`, the aggregated values will be generated using all the rows.\n   * @default \"filtered\"\n   */\n  aggregationRowsScope: PropTypes.oneOf(['all', 'filtered']),\n\n  /**\n   * The ref object that allows grid manipulation. Can be instantiated with [[useGridApiRef()]].\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n\n  /**\n   * The label of the grid.\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * The id of the element containing a label for the grid.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * If `true`, the grid height is dynamic and follow the number of rows in the grid.\n   * @default false\n   */\n  autoHeight: PropTypes.bool,\n\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n\n  /**\n   * Controls the modes of the cells.\n   */\n  cellModesModel: PropTypes.object,\n\n  /**\n   * If `true`, the grid get a first column with a checkbox that allows to select rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n\n  /**\n   * If `true`, the \"Select All\" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.\n   * It only works if the pagination is enabled.\n   * @default false\n   */\n  checkboxSelectionVisibleOnly: chainPropTypes(PropTypes.bool, props => {\n    if (!props.pagination && props.checkboxSelectionVisibleOnly) {\n      return new Error('MUI: The `checkboxSelectionVisibleOnly` prop has no effect when the pagination is not enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * Number of extra columns to be rendered before/after the visible slice.\n   * @default 3\n   */\n  columnBuffer: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * Set of columns of type [[GridColumns]].\n   */\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  /**\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  columnThreshold: PropTypes.number,\n\n  /**\n   * Extend native column types with your new column types.\n   */\n  columnTypes: PropTypes.object,\n\n  /**\n   * Set the column visibility model of the grid.\n   * If defined, the grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n\n  /**\n   * Overrideable components.\n   */\n  components: PropTypes.object,\n\n  /**\n   * Overrideable components props dynamically passed to the component at rendering.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If above 0, the row children will be expanded up to this depth.\n   * If equal to -1, all the row children will be expanded.\n   * @default 0\n   */\n  defaultGroupingExpansionDepth: PropTypes.number,\n\n  /**\n   * Set the density of the grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n\n  /**\n   * The row ids to show the detail panel.\n   */\n  detailPanelExpandedRowIds: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired),\n\n  /**\n   * If `true`, aggregation is disabled.\n   * @default false\n   */\n  disableAggregation: PropTypes.bool,\n\n  /**\n   * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenFiltering: PropTypes.bool,\n\n  /**\n   * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenSorting: PropTypes.bool,\n\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n\n  /**\n   * If `true`, the column pinning is disabled.\n   * @default false\n   */\n  disableColumnPinning: PropTypes.bool,\n\n  /**\n   * If `true`, reordering columns is disabled.\n   * @default false\n   */\n  disableColumnReorder: PropTypes.bool,\n\n  /**\n   * If `true`, resizing columns is disabled.\n   * @default false\n   */\n  disableColumnResize: PropTypes.bool,\n\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n\n  /**\n   * If `true`, rows will not be extended to fill the full width of the grid container.\n   * @default false\n   */\n  disableExtendRowFullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, modification to a cell will not be discarded if the mode is changed from \"edit\" to \"view\" while processing props.\n   * @default false\n   */\n  disableIgnoreModificationsIfProcessingProps: PropTypes.bool,\n\n  /**\n   * If `true`, filtering with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsFiltering: PropTypes.bool,\n\n  /**\n   * If `true`, sorting with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsSorting: PropTypes.bool,\n\n  /**\n   * If `true`, multiple selection using the Ctrl or CMD key is disabled.\n   * @default false\n   */\n  disableMultipleSelection: PropTypes.bool,\n\n  /**\n   * If `true`, the row grouping is disabled.\n   * @default false\n   */\n  disableRowGrouping: PropTypes.bool,\n\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableSelectionOnClick: PropTypes.bool,\n\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n\n  /**\n   * Set the edit rows model of the grid.\n   */\n  editRowsModel: PropTypes.object,\n\n  /**\n   * An error that will turn the grid into its error state and display the error component.\n   */\n  error: PropTypes.any,\n\n  /**\n   * Features under development.\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    aggregation: PropTypes.bool,\n    columnGrouping: PropTypes.bool,\n    newEditingApi: PropTypes.bool,\n    preventCommitWhileValidating: PropTypes.bool,\n    rowPinning: PropTypes.bool,\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: chainPropTypes(PropTypes.oneOf(['client', 'server']), props => {\n    if (props.treeData && props.filterMode === 'server') {\n      return new Error('MUI: The `filterMode=\"server\"` prop is not available when the `treeData` is enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Set the filter model of the grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      columnField: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operatorValue: PropTypes.string,\n      value: PropTypes.any\n    })).isRequired,\n    linkOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n\n  /**\n   * Determines the position of an aggregated value.\n   * @param {GridRowTreeNodeConfig | null} groupNode The current group (`null` being the top level group).\n   * @returns {GridAggregationPosition | null} Position of the aggregated value (if `null`, the group will not be aggregated).\n   * @default `(groupNode) => groupNode == null ? 'footer' : 'inline'`\n   */\n  getAggregationPosition: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n\n  /**\n   * Function that returns the height of the row detail panel.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {number | string} The height in pixels or \"auto\" to use the content height.\n   * @default \"() => 500\"\n   */\n  getDetailPanelHeight: PropTypes.func,\n\n  /**\n   * Function that returns the estimated height for a row.\n   * Only works if dynamic row height is used.\n   * Once the row height is measured this value is discarded.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\n   */\n  getEstimatedRowHeight: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\n   */\n  getRowHeight: PropTypes.func,\n\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n\n  /**\n   * Determines the path of a row in the tree data.\n   * For instance, a row with the path [\"A\", \"B\"] is the child of the row with the path [\"A\"].\n   * Note that all paths must contain at least one element.\n   * @template R\n   * @param {R} row The row from which we want the path.\n   * @returns {string[]} The path to the row.\n   */\n  getTreeDataPath: PropTypes.func,\n\n  /**\n   * The grouping column used by the tree data.\n   */\n  groupingColDef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Set the height in pixel of the column headers in the grid.\n   * @default 56\n   */\n  headerHeight: PropTypes.number,\n\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n\n  /**\n   * If `true`, the row count in the footer is hidden.\n   * It has no effect if the pagination is enabled.\n   * @default false\n   */\n  hideFooterRowCount: chainPropTypes(PropTypes.bool, props => {\n    if (props.pagination && props.hideFooterRowCount) {\n      return new Error('MUI: The `hideFooterRowCount` prop has no effect when the pagination is enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n\n  /**\n   * The initial state of the DataGridPremium.\n   * The data in it will be set in the state on initialization but will not be controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n\n  /**\n   * Determines if a group should be expanded after its creation.\n   * This prop takes priority over the `defaultGroupingExpansionDepth` prop.\n   * @param {GridRowTreeNodeConfig} node The node of the group to test.\n   * @returns {boolean} A boolean indicating if the group is expanded.\n   */\n  isGroupExpandedByDefault: PropTypes.func,\n\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the cell is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n\n  /**\n   * If `true`, the selection model will retain selected rows that do not exist.\n   * Useful when using server side pagination and row selections need to be retained\n   * when changing pages.\n   * @default false\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n\n  /**\n   * If `true`, a  loading overlay is displayed.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Set the locale text of the grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"error\" (\"warn\" in dev mode)\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridAggregationModel} model The aggregated columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onAggregationModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the cell changes are committed.\n   * @param {GridCellEditCommitParams} params With all properties from [[GridCellEditCommitParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when a cell loses focus.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellFocusOut: PropTypes.func,\n\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when the `cellModesModel` prop changes.\n   * @param {GridCellModesModel} cellModesModel Object containig which cells are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellModesModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired while a column is being resized.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnResize: PropTypes.func,\n\n  /**\n   * Callback fired when a column visibility changes.\n   * Only works when no `columnVisibilityModel` is provided and if we change the visibility of a single column at a time.\n   * @param {GridColumnVisibilityChangeParams} params With all properties from [[GridColumnVisibilityChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated Use `onColumnVisibilityModelChange` instead.\n   */\n  onColumnVisibilityChange: PropTypes.func,\n\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the width of a column is changed.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnWidthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the detail panel of a row is opened or closed.\n   * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onDetailPanelExpandedRowIdsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the edit cell value changes.\n   * @param {GridEditCellPropsParams} params With all properties from [[GridEditCellPropsParams]].\n   * @param {MuiEvent<React.SyntheticEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated use `preProcessEditCellProps` from the [`GridColDef`](/x/api/data-grid/grid-col-def/)\n   */\n  onEditCellPropsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the `editRowsModel` changes.\n   * @param {GridEditRowsModel} editRowsModel With all properties from [[GridEditRowsModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onEditRowsModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when an exception is thrown in the grid.\n   * @param {any} args The arguments passed to the `showError` call.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the menu is closed.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuClose: PropTypes.func,\n\n  /**\n   * Callback fired when the menu is opened.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuOpen: PropTypes.func,\n\n  /**\n   * Callback fired when the current page has changed.\n   * @param {number} page Index of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageChange: PropTypes.func,\n\n  /**\n   * Callback fired when the page size has changed.\n   * @param {number} pageSize Size of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageSizeChange: PropTypes.func,\n\n  /**\n   * Callback fired when the pinned columns have changed.\n   * @param {GridPinnedColumns} pinnedColumns The changed pinned columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPinnedColumnsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n\n  /**\n   * Callback fired when the grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the row changes are committed.\n   * @param {GridRowId} id The row id.\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridRowGroupingModel} model Columns used as grouping criteria.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowGroupingModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the `rowModesModel` prop changes.\n   * @param {GridRowModesModel} rowModesModel Object containig which rows are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowModesModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when a row is being reordered.\n   * @param {GridRowOrderChangeParams} params With all properties from [[GridRowOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired when scrolling to the bottom of the grid viewport.\n   * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowsScrollEnd: PropTypes.func,\n\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridSelectionModel} selectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSelectionModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the state of the grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @ignore - do not document.\n   */\n  onStateChange: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   * @default 0\n   */\n  page: PropTypes.number,\n\n  /**\n   * Set the number of rows in one page.\n   * If some of the rows have children (for instance in the tree data), this number represents the amount of top level rows wanted on each page.\n   * @default 100\n   */\n  pageSize: PropTypes.number,\n\n  /**\n   * If `true`, pagination is enabled.\n   * @default false\n   */\n  pagination: PropTypes.bool,\n\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The column fields to display pinned to left or right.\n   */\n  pinnedColumns: PropTypes.shape({\n    left: PropTypes.arrayOf(PropTypes.string),\n    right: PropTypes.arrayOf(PropTypes.string)\n  }),\n\n  /**\n   * Rows data to pin on top or bottom.\n   */\n  pinnedRows: PropTypes.shape({\n    bottom: PropTypes.array,\n    top: PropTypes.array\n  }),\n\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * Only applied if `props.experimentalFeatures.newEditingApi: true`.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n\n  /**\n   * Number of extra rows to be rendered before/after the visible slice.\n   * @default 3\n   */\n  rowBuffer: PropTypes.number,\n\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   */\n  rowCount: PropTypes.number,\n\n  /**\n   * If `single`, all column we are grouping by will be represented in the same grouping the same column.\n   * If `multiple`, each column we are grouping by will be represented in its own column.\n   * @default 'single'\n   */\n  rowGroupingColumnMode: PropTypes.oneOf(['multiple', 'single']),\n\n  /**\n   * Set the row grouping model of the grid.\n   */\n  rowGroupingModel: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Set the height in pixel of a row in the grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n\n  /**\n   * Controls the modes of the rows.\n   */\n  rowModesModel: PropTypes.object,\n\n  /**\n   * If `true`, the reordering of rows is enabled.\n   * @default false\n   */\n  rowReordering: PropTypes.bool,\n\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   */\n  rows: PropTypes.array.isRequired,\n\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  rowThreshold: PropTypes.number,\n\n  /**\n   * Override the height/width of the grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n\n  /**\n   * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.\n   * @default 80\n   */\n  scrollEndThreshold: PropTypes.number,\n\n  /**\n   * Set the selection model of the grid.\n   */\n  selectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n\n  /**\n   * If `true`, the right border of the cells are displayed.\n   * @default false\n   */\n  showCellRightBorder: PropTypes.bool,\n\n  /**\n   * If `true`, the right border of the column headers are displayed.\n   * @default false\n   */\n  showColumnRightBorder: PropTypes.bool,\n\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n\n  /**\n   * Set the sort model of the grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * If positive, the Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.\n   * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.\n   * @default 0\n   */\n  throttleRowsMs: PropTypes.number,\n\n  /**\n   * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.\n   * @default false\n   */\n  treeData: PropTypes.bool\n} : void 0;","map":{"version":3,"names":["React","PropTypes","useLicenseVerifier","Watermark","chainPropTypes","GridBody","GridErrorHandler","GridFooterPlaceholder","GridHeaderPlaceholder","GridRoot","GridContextProvider","DataGridProVirtualScroller","DataGridProColumnHeaders","useDataGridPremiumComponent","useDataGridPremiumProps","getReleaseInfo","jsx","_jsx","jsxs","_jsxs","releaseInfo","DataGridPremiumRaw","forwardRef","DataGridPremium","inProps","ref","props","apiRef","children","className","style","sx","ColumnHeadersComponent","VirtualScrollerComponent","packageName","memo","process","env","NODE_ENV","propTypes","aggregationFunctions","object","aggregationModel","aggregationRowsScope","oneOf","shape","current","isRequired","string","autoHeight","bool","autoPageSize","cellModesModel","checkboxSelection","checkboxSelectionVisibleOnly","pagination","Error","classes","columnBuffer","number","columnGroupingModel","arrayOf","columns","columnThreshold","columnTypes","columnVisibilityModel","components","componentsProps","defaultGroupingExpansionDepth","density","detailPanelExpandedRowIds","oneOfType","disableAggregation","disableChildrenFiltering","disableChildrenSorting","disableColumnFilter","disableColumnMenu","disableColumnPinning","disableColumnReorder","disableColumnResize","disableColumnSelector","disableDensitySelector","disableExtendRowFullWidth","disableIgnoreModificationsIfProcessingProps","disableMultipleColumnsFiltering","disableMultipleColumnsSorting","disableMultipleSelection","disableRowGrouping","disableSelectionOnClick","disableVirtualization","editMode","editRowsModel","error","any","experimentalFeatures","aggregation","columnGrouping","newEditingApi","preventCommitWhileValidating","rowPinning","warnIfFocusStateIsNotSynced","filterMode","treeData","filterModel","items","columnField","id","operatorValue","value","linkOperator","quickFilterLogicOperator","quickFilterValues","array","getAggregationPosition","func","getCellClassName","getDetailPanelContent","getDetailPanelHeight","getEstimatedRowHeight","getRowClassName","getRowHeight","getRowId","getRowSpacing","getTreeDataPath","groupingColDef","headerHeight","hideFooter","hideFooterPagination","hideFooterRowCount","hideFooterSelectedRowCount","initialState","isCellEditable","isGroupExpandedByDefault","isRowSelectable","keepNonExistentRowsSelected","loading","localeText","logger","debug","info","warn","logLevel","nonce","onAggregationModelChange","onCellClick","onCellDoubleClick","onCellEditCommit","onCellEditStart","onCellEditStop","onCellFocusOut","onCellKeyDown","onCellModesModelChange","onColumnHeaderClick","onColumnHeaderDoubleClick","onColumnHeaderEnter","onColumnHeaderLeave","onColumnHeaderOut","onColumnHeaderOver","onColumnOrderChange","onColumnResize","onColumnVisibilityChange","onColumnVisibilityModelChange","onColumnWidthChange","onDetailPanelExpandedRowIdsChange","onEditCellPropsChange","onEditRowsModelChange","onError","onFilterModelChange","onMenuClose","onMenuOpen","onPageChange","onPageSizeChange","onPinnedColumnsChange","onPreferencePanelClose","onPreferencePanelOpen","onProcessRowUpdateError","onResize","onRowClick","onRowDoubleClick","onRowEditCommit","onRowEditStart","onRowEditStop","onRowGroupingModelChange","onRowModesModelChange","onRowOrderChange","onRowsScrollEnd","onSelectionModelChange","onSortModelChange","onStateChange","page","pageSize","paginationMode","pinnedColumns","left","right","pinnedRows","bottom","top","processRowUpdate","rowBuffer","rowCount","rowGroupingColumnMode","rowGroupingModel","rowHeight","rowModesModel","rowReordering","rows","rowSpacingType","rowsPerPageOptions","rowThreshold","scrollbarSize","scrollEndThreshold","selectionModel","showCellRightBorder","showColumnRightBorder","sortingMode","sortingOrder","sortModel","field","sort","throttleRowsMs"],"sources":["C:/Users/Utilizador/OneDrive/Ambiente de Trabalho/SchoolApplication/frontend/node_modules/@mui/x-data-grid-premium/DataGridPremium/DataGridPremium.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier, Watermark } from '@mui/x-license-pro';\nimport { chainPropTypes } from '@mui/utils';\nimport { GridBody, GridErrorHandler, GridFooterPlaceholder, GridHeaderPlaceholder, GridRoot, GridContextProvider } from '@mui/x-data-grid-pro';\nimport { DataGridProVirtualScroller, DataGridProColumnHeaders } from '@mui/x-data-grid-pro/internals';\nimport { useDataGridPremiumComponent } from './useDataGridPremiumComponent';\nimport { useDataGridPremiumProps } from './useDataGridPremiumProps';\nimport { getReleaseInfo } from '../utils/releaseInfo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\nconst DataGridPremiumRaw = /*#__PURE__*/React.forwardRef(function DataGridPremium(inProps, ref) {\n  const props = useDataGridPremiumProps(inProps);\n  const apiRef = useDataGridPremiumComponent(props.apiRef, props);\n  useLicenseVerifier('x-data-grid-premium', releaseInfo);\n  return /*#__PURE__*/_jsx(GridContextProvider, {\n    apiRef: apiRef,\n    props: props,\n    children: /*#__PURE__*/_jsx(GridRoot, {\n      className: props.className,\n      style: props.style,\n      sx: props.sx,\n      ref: ref,\n      children: /*#__PURE__*/_jsxs(GridErrorHandler, {\n        children: [/*#__PURE__*/_jsx(GridHeaderPlaceholder, {}), /*#__PURE__*/_jsx(GridBody, {\n          ColumnHeadersComponent: DataGridProColumnHeaders,\n          VirtualScrollerComponent: DataGridProVirtualScroller,\n          children: /*#__PURE__*/_jsx(Watermark, {\n            packageName: \"x-data-grid-premium\",\n            releaseInfo: releaseInfo\n          })\n        }), /*#__PURE__*/_jsx(GridFooterPlaceholder, {})]\n      })\n    })\n  });\n});\nexport const DataGridPremium = /*#__PURE__*/React.memo(DataGridPremiumRaw);\nprocess.env.NODE_ENV !== \"production\" ? DataGridPremiumRaw.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Aggregation functions available on the grid.\n   * @default GRID_AGGREGATION_FUNCTIONS\n   */\n  aggregationFunctions: PropTypes.object,\n\n  /**\n   * Set the aggregation model of the grid.\n   */\n  aggregationModel: PropTypes.object,\n\n  /**\n   * Rows used to generate the aggregated value.\n   * If `filtered`, the aggregated values will be generated using only the rows currently passing the filtering process.\n   * If `all`, the aggregated values will be generated using all the rows.\n   * @default \"filtered\"\n   */\n  aggregationRowsScope: PropTypes.oneOf(['all', 'filtered']),\n\n  /**\n   * The ref object that allows grid manipulation. Can be instantiated with [[useGridApiRef()]].\n   */\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }),\n\n  /**\n   * The label of the grid.\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * The id of the element containing a label for the grid.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * If `true`, the grid height is dynamic and follow the number of rows in the grid.\n   * @default false\n   */\n  autoHeight: PropTypes.bool,\n\n  /**\n   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n   * @default false\n   */\n  autoPageSize: PropTypes.bool,\n\n  /**\n   * Controls the modes of the cells.\n   */\n  cellModesModel: PropTypes.object,\n\n  /**\n   * If `true`, the grid get a first column with a checkbox that allows to select rows.\n   * @default false\n   */\n  checkboxSelection: PropTypes.bool,\n\n  /**\n   * If `true`, the \"Select All\" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.\n   * It only works if the pagination is enabled.\n   * @default false\n   */\n  checkboxSelectionVisibleOnly: chainPropTypes(PropTypes.bool, props => {\n    if (!props.pagination && props.checkboxSelectionVisibleOnly) {\n      return new Error('MUI: The `checkboxSelectionVisibleOnly` prop has no effect when the pagination is not enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * Number of extra columns to be rendered before/after the visible slice.\n   * @default 3\n   */\n  columnBuffer: PropTypes.number,\n  columnGroupingModel: PropTypes.arrayOf(PropTypes.object),\n\n  /**\n   * Set of columns of type [[GridColumns]].\n   */\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n  /**\n   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  columnThreshold: PropTypes.number,\n\n  /**\n   * Extend native column types with your new column types.\n   */\n  columnTypes: PropTypes.object,\n\n  /**\n   * Set the column visibility model of the grid.\n   * If defined, the grid will ignore the `hide` property in [[GridColDef]].\n   */\n  columnVisibilityModel: PropTypes.object,\n\n  /**\n   * Overrideable components.\n   */\n  components: PropTypes.object,\n\n  /**\n   * Overrideable components props dynamically passed to the component at rendering.\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * If above 0, the row children will be expanded up to this depth.\n   * If equal to -1, all the row children will be expanded.\n   * @default 0\n   */\n  defaultGroupingExpansionDepth: PropTypes.number,\n\n  /**\n   * Set the density of the grid.\n   * @default \"standard\"\n   */\n  density: PropTypes.oneOf(['comfortable', 'compact', 'standard']),\n\n  /**\n   * The row ids to show the detail panel.\n   */\n  detailPanelExpandedRowIds: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired),\n\n  /**\n   * If `true`, aggregation is disabled.\n   * @default false\n   */\n  disableAggregation: PropTypes.bool,\n\n  /**\n   * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenFiltering: PropTypes.bool,\n\n  /**\n   * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.\n   * @default false\n   */\n  disableChildrenSorting: PropTypes.bool,\n\n  /**\n   * If `true`, column filters are disabled.\n   * @default false\n   */\n  disableColumnFilter: PropTypes.bool,\n\n  /**\n   * If `true`, the column menu is disabled.\n   * @default false\n   */\n  disableColumnMenu: PropTypes.bool,\n\n  /**\n   * If `true`, the column pinning is disabled.\n   * @default false\n   */\n  disableColumnPinning: PropTypes.bool,\n\n  /**\n   * If `true`, reordering columns is disabled.\n   * @default false\n   */\n  disableColumnReorder: PropTypes.bool,\n\n  /**\n   * If `true`, resizing columns is disabled.\n   * @default false\n   */\n  disableColumnResize: PropTypes.bool,\n\n  /**\n   * If `true`, hiding/showing columns is disabled.\n   * @default false\n   */\n  disableColumnSelector: PropTypes.bool,\n\n  /**\n   * If `true`, the density selector is disabled.\n   * @default false\n   */\n  disableDensitySelector: PropTypes.bool,\n\n  /**\n   * If `true`, rows will not be extended to fill the full width of the grid container.\n   * @default false\n   */\n  disableExtendRowFullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, modification to a cell will not be discarded if the mode is changed from \"edit\" to \"view\" while processing props.\n   * @default false\n   */\n  disableIgnoreModificationsIfProcessingProps: PropTypes.bool,\n\n  /**\n   * If `true`, filtering with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsFiltering: PropTypes.bool,\n\n  /**\n   * If `true`, sorting with multiple columns is disabled.\n   * @default false\n   */\n  disableMultipleColumnsSorting: PropTypes.bool,\n\n  /**\n   * If `true`, multiple selection using the Ctrl or CMD key is disabled.\n   * @default false\n   */\n  disableMultipleSelection: PropTypes.bool,\n\n  /**\n   * If `true`, the row grouping is disabled.\n   * @default false\n   */\n  disableRowGrouping: PropTypes.bool,\n\n  /**\n   * If `true`, the selection on click on a row or cell is disabled.\n   * @default false\n   */\n  disableSelectionOnClick: PropTypes.bool,\n\n  /**\n   * If `true`, the virtualization is disabled.\n   * @default false\n   */\n  disableVirtualization: PropTypes.bool,\n\n  /**\n   * Controls whether to use the cell or row editing.\n   * @default \"cell\"\n   */\n  editMode: PropTypes.oneOf(['cell', 'row']),\n\n  /**\n   * Set the edit rows model of the grid.\n   */\n  editRowsModel: PropTypes.object,\n\n  /**\n   * An error that will turn the grid into its error state and display the error component.\n   */\n  error: PropTypes.any,\n\n  /**\n   * Features under development.\n   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n   */\n  experimentalFeatures: PropTypes.shape({\n    aggregation: PropTypes.bool,\n    columnGrouping: PropTypes.bool,\n    newEditingApi: PropTypes.bool,\n    preventCommitWhileValidating: PropTypes.bool,\n    rowPinning: PropTypes.bool,\n    warnIfFocusStateIsNotSynced: PropTypes.bool\n  }),\n\n  /**\n   * Filtering can be processed on the server or client-side.\n   * Set it to 'server' if you would like to handle filtering on the server-side.\n   * @default \"client\"\n   */\n  filterMode: chainPropTypes(PropTypes.oneOf(['client', 'server']), props => {\n    if (props.treeData && props.filterMode === 'server') {\n      return new Error('MUI: The `filterMode=\"server\"` prop is not available when the `treeData` is enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Set the filter model of the grid.\n   */\n  filterModel: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.shape({\n      columnField: PropTypes.string.isRequired,\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      operatorValue: PropTypes.string,\n      value: PropTypes.any\n    })).isRequired,\n    linkOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterLogicOperator: PropTypes.oneOf(['and', 'or']),\n    quickFilterValues: PropTypes.array\n  }),\n\n  /**\n   * Determines the position of an aggregated value.\n   * @param {GridRowTreeNodeConfig | null} groupNode The current group (`null` being the top level group).\n   * @returns {GridAggregationPosition | null} Position of the aggregated value (if `null`, the group will not be aggregated).\n   * @default `(groupNode) => groupNode == null ? 'footer' : 'inline'`\n   */\n  getAggregationPosition: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on cells.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {string} The CSS class to apply to the cell.\n   */\n  getCellClassName: PropTypes.func,\n\n  /**\n   * Function that returns the element to render in row detail.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {JSX.Element} The row detail element.\n   */\n  getDetailPanelContent: PropTypes.func,\n\n  /**\n   * Function that returns the height of the row detail panel.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {number | string} The height in pixels or \"auto\" to use the content height.\n   * @default \"() => 500\"\n   */\n  getDetailPanelHeight: PropTypes.func,\n\n  /**\n   * Function that returns the estimated height for a row.\n   * Only works if dynamic row height is used.\n   * Once the row height is measured this value is discarded.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\n   */\n  getEstimatedRowHeight: PropTypes.func,\n\n  /**\n   * Function that applies CSS classes dynamically on rows.\n   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n   * @returns {string} The CSS class to apply to the row.\n   */\n  getRowClassName: PropTypes.func,\n\n  /**\n   * Function that sets the row height per row.\n   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\n   */\n  getRowHeight: PropTypes.func,\n\n  /**\n   * Return the id of a given [[GridRowModel]].\n   */\n  getRowId: PropTypes.func,\n\n  /**\n   * Function that allows to specify the spacing between rows.\n   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n   * @returns {GridRowSpacing} The row spacing values.\n   */\n  getRowSpacing: PropTypes.func,\n\n  /**\n   * Determines the path of a row in the tree data.\n   * For instance, a row with the path [\"A\", \"B\"] is the child of the row with the path [\"A\"].\n   * Note that all paths must contain at least one element.\n   * @template R\n   * @param {R} row The row from which we want the path.\n   * @returns {string[]} The path to the row.\n   */\n  getTreeDataPath: PropTypes.func,\n\n  /**\n   * The grouping column used by the tree data.\n   */\n  groupingColDef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Set the height in pixel of the column headers in the grid.\n   * @default 56\n   */\n  headerHeight: PropTypes.number,\n\n  /**\n   * If `true`, the footer component is hidden.\n   * @default false\n   */\n  hideFooter: PropTypes.bool,\n\n  /**\n   * If `true`, the pagination component in the footer is hidden.\n   * @default false\n   */\n  hideFooterPagination: PropTypes.bool,\n\n  /**\n   * If `true`, the row count in the footer is hidden.\n   * It has no effect if the pagination is enabled.\n   * @default false\n   */\n  hideFooterRowCount: chainPropTypes(PropTypes.bool, props => {\n    if (props.pagination && props.hideFooterRowCount) {\n      return new Error('MUI: The `hideFooterRowCount` prop has no effect when the pagination is enabled.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * If `true`, the selected row count in the footer is hidden.\n   * @default false\n   */\n  hideFooterSelectedRowCount: PropTypes.bool,\n\n  /**\n   * The initial state of the DataGridPremium.\n   * The data in it will be set in the state on initialization but will not be controlled.\n   * If one of the data in `initialState` is also being controlled, then the control state wins.\n   */\n  initialState: PropTypes.object,\n\n  /**\n   * Callback fired when a cell is rendered, returns true if the cell is editable.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @returns {boolean} A boolean indicating if the cell is editable.\n   */\n  isCellEditable: PropTypes.func,\n\n  /**\n   * Determines if a group should be expanded after its creation.\n   * This prop takes priority over the `defaultGroupingExpansionDepth` prop.\n   * @param {GridRowTreeNodeConfig} node The node of the group to test.\n   * @returns {boolean} A boolean indicating if the group is expanded.\n   */\n  isGroupExpandedByDefault: PropTypes.func,\n\n  /**\n   * Determines if a row can be selected.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @returns {boolean} A boolean indicating if the cell is selectable.\n   */\n  isRowSelectable: PropTypes.func,\n\n  /**\n   * If `true`, the selection model will retain selected rows that do not exist.\n   * Useful when using server side pagination and row selections need to be retained\n   * when changing pages.\n   * @default false\n   */\n  keepNonExistentRowsSelected: PropTypes.bool,\n\n  /**\n   * If `true`, a  loading overlay is displayed.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Set the locale text of the grid.\n   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n   */\n  localeText: PropTypes.object,\n\n  /**\n   * Pass a custom logger in the components that implements the [[Logger]] interface.\n   * @default console\n   */\n  logger: PropTypes.shape({\n    debug: PropTypes.func.isRequired,\n    error: PropTypes.func.isRequired,\n    info: PropTypes.func.isRequired,\n    warn: PropTypes.func.isRequired\n  }),\n\n  /**\n   * Allows to pass the logging level or false to turn off logging.\n   * @default \"error\" (\"warn\" in dev mode)\n   */\n  logLevel: PropTypes.oneOf(['debug', 'error', 'info', 'warn', false]),\n\n  /**\n   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n   */\n  nonce: PropTypes.string,\n\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridAggregationModel} model The aggregated columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onAggregationModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when any cell is clicked.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the cell changes are committed.\n   * @param {GridCellEditCommitParams} params With all properties from [[GridCellEditCommitParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to edit mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the cell turns to view mode.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onCellEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when a cell loses focus.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellFocusOut: PropTypes.func,\n\n  /**\n   * Callback fired when a keydown event comes from a cell element.\n   * @param {GridCellParams} params With all properties from [[GridCellParams]].\n   * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired when the `cellModesModel` prop changes.\n   * @param {GridCellModesModel} cellModesModel Object containig which cells are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onCellModesModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when a click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse enter event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderEnter: PropTypes.func,\n\n  /**\n   * Callback fired when a mouse leave event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderLeave: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseout event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOut: PropTypes.func,\n\n  /**\n   * Callback fired when a mouseover event comes from a column header element.\n   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnHeaderOver: PropTypes.func,\n\n  /**\n   * Callback fired when a column is reordered.\n   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired while a column is being resized.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnResize: PropTypes.func,\n\n  /**\n   * Callback fired when a column visibility changes.\n   * Only works when no `columnVisibilityModel` is provided and if we change the visibility of a single column at a time.\n   * @param {GridColumnVisibilityChangeParams} params With all properties from [[GridColumnVisibilityChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated Use `onColumnVisibilityModelChange` instead.\n   */\n  onColumnVisibilityChange: PropTypes.func,\n\n  /**\n   * Callback fired when the column visibility model changes.\n   * @param {GridColumnVisibilityModel} model The new model.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnVisibilityModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the width of a column is changed.\n   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onColumnWidthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the detail panel of a row is opened or closed.\n   * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onDetailPanelExpandedRowIdsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the edit cell value changes.\n   * @param {GridEditCellPropsParams} params With all properties from [[GridEditCellPropsParams]].\n   * @param {MuiEvent<React.SyntheticEvent>} event The event that caused this prop to be called.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @deprecated use `preProcessEditCellProps` from the [`GridColDef`](/x/api/data-grid/grid-col-def/)\n   */\n  onEditCellPropsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the `editRowsModel` changes.\n   * @param {GridEditRowsModel} editRowsModel With all properties from [[GridEditRowsModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onEditRowsModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when an exception is thrown in the grid.\n   * @param {any} args The arguments passed to the `showError` call.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the Filter model changes before the filters are applied.\n   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onFilterModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the menu is closed.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuClose: PropTypes.func,\n\n  /**\n   * Callback fired when the menu is opened.\n   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onMenuOpen: PropTypes.func,\n\n  /**\n   * Callback fired when the current page has changed.\n   * @param {number} page Index of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageChange: PropTypes.func,\n\n  /**\n   * Callback fired when the page size has changed.\n   * @param {number} pageSize Size of the page displayed on the Grid.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPageSizeChange: PropTypes.func,\n\n  /**\n   * Callback fired when the pinned columns have changed.\n   * @param {GridPinnedColumns} pinnedColumns The changed pinned columns.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPinnedColumnsChange: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is closed.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelClose: PropTypes.func,\n\n  /**\n   * Callback fired when the preferences panel is opened.\n   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onPreferencePanelOpen: PropTypes.func,\n\n  /**\n   * Callback called when `processRowUpdate` throws an error or rejects.\n   * @param {any} error The error thrown.\n   */\n  onProcessRowUpdateError: PropTypes.func,\n\n  /**\n   * Callback fired when the grid is resized.\n   * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onResize: PropTypes.func,\n\n  /**\n   * Callback fired when a row is clicked.\n   * Not called if the target clicked is an interactive element added by the built-in columns.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowClick: PropTypes.func,\n\n  /**\n   * Callback fired when a double click event comes from a row container element.\n   * @param {GridRowParams} params With all properties from [[RowParams]].\n   * @param {MuiEvent<React.MouseEvent>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowDoubleClick: PropTypes.func,\n\n  /**\n   * Callback fired when the row changes are committed.\n   * @param {GridRowId} id The row id.\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditCommit: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to edit mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStart: PropTypes.func,\n\n  /**\n   * Callback fired when the row turns to view mode.\n   * @param {GridRowParams} params With all properties from [[GridRowParams]].\n   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n   */\n  onRowEditStop: PropTypes.func,\n\n  /**\n   * Callback fired when the row grouping model changes.\n   * @param {GridRowGroupingModel} model Columns used as grouping criteria.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowGroupingModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the `rowModesModel` prop changes.\n   * @param {GridRowModesModel} rowModesModel Object containig which rows are in \"edit\" mode.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowModesModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when a row is being reordered.\n   * @param {GridRowOrderChangeParams} params With all properties from [[GridRowOrderChangeParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowOrderChange: PropTypes.func,\n\n  /**\n   * Callback fired when scrolling to the bottom of the grid viewport.\n   * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onRowsScrollEnd: PropTypes.func,\n\n  /**\n   * Callback fired when the selection state of one or multiple rows changes.\n   * @param {GridSelectionModel} selectionModel With all the row ids [[GridSelectionModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSelectionModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the sort model changes before a column is sorted.\n   * @param {GridSortModel} model With all properties from [[GridSortModel]].\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   */\n  onSortModelChange: PropTypes.func,\n\n  /**\n   * Callback fired when the state of the grid is updated.\n   * @param {GridState} state The new state.\n   * @param {MuiEvent<{}>} event The event object.\n   * @param {GridCallbackDetails} details Additional details for this callback.\n   * @ignore - do not document.\n   */\n  onStateChange: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   * @default 0\n   */\n  page: PropTypes.number,\n\n  /**\n   * Set the number of rows in one page.\n   * If some of the rows have children (for instance in the tree data), this number represents the amount of top level rows wanted on each page.\n   * @default 100\n   */\n  pageSize: PropTypes.number,\n\n  /**\n   * If `true`, pagination is enabled.\n   * @default false\n   */\n  pagination: PropTypes.bool,\n\n  /**\n   * Pagination can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle the pagination on the client-side.\n   * Set it to 'server' if you would like to handle the pagination on the server-side.\n   * @default \"client\"\n   */\n  paginationMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The column fields to display pinned to left or right.\n   */\n  pinnedColumns: PropTypes.shape({\n    left: PropTypes.arrayOf(PropTypes.string),\n    right: PropTypes.arrayOf(PropTypes.string)\n  }),\n\n  /**\n   * Rows data to pin on top or bottom.\n   */\n  pinnedRows: PropTypes.shape({\n    bottom: PropTypes.array,\n    top: PropTypes.array\n  }),\n\n  /**\n   * Callback called before updating a row with new values in the row and cell editing.\n   * Only applied if `props.experimentalFeatures.newEditingApi: true`.\n   * @template R\n   * @param {R} newRow Row object with the new values.\n   * @param {R} oldRow Row object with the old values.\n   * @returns {Promise<R> | R} The final values to update the row.\n   */\n  processRowUpdate: PropTypes.func,\n\n  /**\n   * Number of extra rows to be rendered before/after the visible slice.\n   * @default 3\n   */\n  rowBuffer: PropTypes.number,\n\n  /**\n   * Set the total number of rows, if it is different from the length of the value `rows` prop.\n   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n   */\n  rowCount: PropTypes.number,\n\n  /**\n   * If `single`, all column we are grouping by will be represented in the same grouping the same column.\n   * If `multiple`, each column we are grouping by will be represented in its own column.\n   * @default 'single'\n   */\n  rowGroupingColumnMode: PropTypes.oneOf(['multiple', 'single']),\n\n  /**\n   * Set the row grouping model of the grid.\n   */\n  rowGroupingModel: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Set the height in pixel of a row in the grid.\n   * @default 52\n   */\n  rowHeight: PropTypes.number,\n\n  /**\n   * Controls the modes of the rows.\n   */\n  rowModesModel: PropTypes.object,\n\n  /**\n   * If `true`, the reordering of rows is enabled.\n   * @default false\n   */\n  rowReordering: PropTypes.bool,\n\n  /**\n   * Set of rows of type [[GridRowsProp]].\n   */\n  rows: PropTypes.array.isRequired,\n\n  /**\n   * Sets the type of space between rows added by `getRowSpacing`.\n   * @default \"margin\"\n   */\n  rowSpacingType: PropTypes.oneOf(['border', 'margin']),\n\n  /**\n   * Select the pageSize dynamically using the component UI.\n   * @default [25, 50, 100]\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\n   * @default 3\n   */\n  rowThreshold: PropTypes.number,\n\n  /**\n   * Override the height/width of the grid inner scrollbar.\n   */\n  scrollbarSize: PropTypes.number,\n\n  /**\n   * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.\n   * @default 80\n   */\n  scrollEndThreshold: PropTypes.number,\n\n  /**\n   * Set the selection model of the grid.\n   */\n  selectionModel: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired), PropTypes.number, PropTypes.string]),\n\n  /**\n   * If `true`, the right border of the cells are displayed.\n   * @default false\n   */\n  showCellRightBorder: PropTypes.bool,\n\n  /**\n   * If `true`, the right border of the column headers are displayed.\n   * @default false\n   */\n  showColumnRightBorder: PropTypes.bool,\n\n  /**\n   * Sorting can be processed on the server or client-side.\n   * Set it to 'client' if you would like to handle sorting on the client-side.\n   * Set it to 'server' if you would like to handle sorting on the server-side.\n   * @default \"client\"\n   */\n  sortingMode: PropTypes.oneOf(['client', 'server']),\n\n  /**\n   * The order of the sorting sequence.\n   * @default ['asc', 'desc', null]\n   */\n  sortingOrder: PropTypes.arrayOf(PropTypes.oneOf(['asc', 'desc'])),\n\n  /**\n   * Set the sort model of the grid.\n   */\n  sortModel: PropTypes.arrayOf(PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    sort: PropTypes.oneOf(['asc', 'desc'])\n  })),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * If positive, the Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.\n   * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.\n   * @default 0\n   */\n  throttleRowsMs: PropTypes.number,\n\n  /**\n   * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.\n   * @default false\n   */\n  treeData: PropTypes.bool\n} : void 0;"],"mappings":"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,CAACiH,IAvoBsC;;EAyoBrE;AACF;AACA;AACA;AACA;EACEiD,iCAAiC,EAAElK,SAAS,CAACiH,IA9oBwB;;EAgpBrE;AACF;AACA;AACA;AACA;AACA;AACA;EACEkD,qBAAqB,EAAEnK,SAAS,CAACiH,IAvpBoC;;EAypBrE;AACF;AACA;AACA;AACA;EACEmD,qBAAqB,EAAEpK,SAAS,CAACiH,IA9pBoC;;EAgqBrE;AACF;AACA;AACA;AACA;AACA;EACEoD,OAAO,EAAErK,SAAS,CAACiH,IAtqBkD;;EAwqBrE;AACF;AACA;AACA;AACA;EACEqD,mBAAmB,EAAEtK,SAAS,CAACiH,IA7qBsC;;EA+qBrE;AACF;AACA;AACA;AACA;AACA;EACEsD,WAAW,EAAEvK,SAAS,CAACiH,IArrB8C;;EAurBrE;AACF;AACA;AACA;AACA;AACA;EACEuD,UAAU,EAAExK,SAAS,CAACiH,IA7rB+C;;EA+rBrE;AACF;AACA;AACA;AACA;EACEwD,YAAY,EAAEzK,SAAS,CAACiH,IApsB6C;;EAssBrE;AACF;AACA;AACA;AACA;EACEyD,gBAAgB,EAAE1K,SAAS,CAACiH,IA3sByC;;EA6sBrE;AACF;AACA;AACA;AACA;EACE0D,qBAAqB,EAAE3K,SAAS,CAACiH,IAltBoC;;EAotBrE;AACF;AACA;AACA;AACA;AACA;EACE2D,sBAAsB,EAAE5K,SAAS,CAACiH,IA1tBmC;;EA4tBrE;AACF;AACA;AACA;AACA;AACA;EACE4D,qBAAqB,EAAE7K,SAAS,CAACiH,IAluBoC;;EAouBrE;AACF;AACA;AACA;EACE6D,uBAAuB,EAAE9K,SAAS,CAACiH,IAxuBkC;;EA0uBrE;AACF;AACA;AACA;AACA;AACA;EACE8D,QAAQ,EAAE/K,SAAS,CAACiH,IAhvBiD;;EAkvBrE;AACF;AACA;AACA;AACA;AACA;AACA;EACE+D,UAAU,EAAEhL,SAAS,CAACiH,IAzvB+C;;EA2vBrE;AACF;AACA;AACA;AACA;AACA;EACEgE,gBAAgB,EAAEjL,SAAS,CAACiH,IAjwByC;;EAmwBrE;AACF;AACA;AACA;AA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"},"metadata":{},"sourceType":"module"}