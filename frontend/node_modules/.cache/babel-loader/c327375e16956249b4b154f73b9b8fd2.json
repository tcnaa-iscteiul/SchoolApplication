{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport MuiDivider from '@mui/material/Divider';\nimport { useGridApiEventHandler, useGridApiMethod, gridFilteredDescendantCountLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor, isDeepEqual } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { getRowGroupingFieldFromGroupingCriteria, ROW_GROUPING_STRATEGY, isGroupingColumn, mergeStateWithRowGroupingModel, setStrategyAvailability } from './gridRowGroupingUtils';\nimport { GridRowGroupableColumnMenuItems } from '../../../components/GridRowGroupableColumnMenuItems';\nimport { GridRowGroupingColumnMenuItems } from '../../../components/GridRowGroupingColumnMenuItems';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst Divider = () => /*#__PURE__*/_jsx(MuiDivider, {\n  onClick: event => event.stopPropagation()\n});\n\nexport const rowGroupingStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$rowGroupingMod, _props$initialState, _props$initialState$r;\n\n  apiRef.current.unstable_caches.rowGrouping = {\n    sanitizedModelOnLastRowTreeCreation: []\n  };\n  return _extends({}, state, {\n    rowGrouping: {\n      model: (_ref = (_props$rowGroupingMod = props.rowGroupingModel) != null ? _props$rowGroupingMod : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$r = _props$initialState.rowGrouping) == null ? void 0 : _props$initialState$r.model) != null ? _ref : []\n    }\n  });\n};\n/**\n * @requires useGridColumns (state, method) - can be after, async only\n * @requires useGridRows (state, method) - can be after, async only\n * @requires useGridParamsApi (method) - can be after, async only\n */\n\nexport const useGridRowGrouping = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$;\n\n  apiRef.current.unstable_registerControlState({\n    stateId: 'rowGrouping',\n    propModel: props.rowGroupingModel,\n    propOnChange: props.onRowGroupingModelChange,\n    stateSelector: gridRowGroupingModelSelector,\n    changeEvent: 'rowGroupingModelChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setRowGroupingModel = React.useCallback(model => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(model));\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  const addRowGroupingCriteria = React.useCallback((field, groupingIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (currentModel.includes(field)) {\n      return;\n    }\n\n    const cleanGroupingIndex = groupingIndex != null ? groupingIndex : currentModel.length;\n    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const removeRowGroupingCriteria = React.useCallback(field => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (!currentModel.includes(field)) {\n      return;\n    }\n\n    apiRef.current.setRowGroupingModel(currentModel.filter(el => el !== field));\n  }, [apiRef]);\n  const setRowGroupingCriteriaIndex = React.useCallback((field, targetIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    const currentTargetIndex = currentModel.indexOf(field);\n\n    if (currentTargetIndex === -1) {\n      return;\n    }\n\n    const updatedModel = [...currentModel];\n    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const rowGroupingApi = {\n    setRowGroupingModel,\n    addRowGroupingCriteria,\n    removeRowGroupingCriteria,\n    setRowGroupingCriteriaIndex\n  };\n  useGridApiMethod(apiRef, rowGroupingApi, 'GridRowGroupingApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addColumnMenuButtons = React.useCallback((initialValue, column) => {\n    if (props.disableRowGrouping) {\n      return initialValue;\n    }\n\n    let menuItems;\n\n    if (isGroupingColumn(column.field)) {\n      menuItems = /*#__PURE__*/_jsx(GridRowGroupingColumnMenuItems, {});\n    } else if (column.groupable) {\n      menuItems = /*#__PURE__*/_jsx(GridRowGroupableColumnMenuItems, {});\n    } else {\n      menuItems = null;\n    }\n\n    if (menuItems == null) {\n      return initialValue;\n    }\n\n    return [...initialValue, /*#__PURE__*/_jsx(Divider, {}), menuItems];\n  }, [props.disableRowGrouping]);\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n\n    const rowGroupingModelToExport = gridRowGroupingModelSelector(apiRef);\n    const shouldExportRowGroupingModel = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.rowGroupingModel != null || // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.rowGrouping) == null ? void 0 : _props$initialState2$.model) != null || // Export if the model is not empty\n    Object.keys(rowGroupingModelToExport).length > 0;\n\n    if (!shouldExportRowGroupingModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      rowGrouping: {\n        model: rowGroupingModelToExport\n      }\n    });\n  }, [apiRef, props.rowGroupingModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.rowGrouping) == null ? void 0 : _props$initialState3$.model]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    if (props.disableRowGrouping) {\n      return params;\n    }\n\n    const rowGroupingModel = (_context$stateToResto = context.stateToRestore.rowGrouping) == null ? void 0 : _context$stateToResto.model;\n\n    if (rowGroupingModel != null) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(rowGroupingModel));\n    }\n\n    return params;\n  }, [apiRef, props.disableRowGrouping]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (isGroupingColumn(cellParams.field) && event.key === ' ' && !event.shiftKey) {\n      var _gridFilteredDescenda;\n\n      event.stopPropagation();\n      event.preventDefault();\n      const filteredDescendantCount = (_gridFilteredDescenda = gridFilteredDescendantCountLookupSelector(apiRef)[params.id]) != null ? _gridFilteredDescenda : 0;\n      const isOnGroupingCell = props.rowGroupingColumnMode === 'single' || getRowGroupingFieldFromGroupingCriteria(params.rowNode.groupingField) === params.field;\n\n      if (!isOnGroupingCell || filteredDescendantCount === 0) {\n        return;\n      }\n\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef, props.rowGroupingColumnMode]);\n  const checkGroupingColumnsModelDiff = React.useCallback(() => {\n    const rowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const lastGroupingColumnsModelApplied = apiRef.current.unstable_caches.rowGrouping.sanitizedModelOnLastRowTreeCreation;\n\n    if (!isDeepEqual(lastGroupingColumnsModelApplied, rowGroupingModel)) {\n      apiRef.current.unstable_caches.rowGrouping.sanitizedModelOnLastRowTreeCreation = rowGroupingModel;\n      apiRef.current.unstable_requestPipeProcessorsApplication('hydrateColumns');\n      setStrategyAvailability(apiRef, props.disableRowGrouping); // Refresh the row tree creation strategy processing\n      // TODO: Add a clean way to re-run a strategy processing without publishing a private event\n\n      if (apiRef.current.unstable_getActiveStrategy('rowTree') === ROW_GROUPING_STRATEGY) {\n        apiRef.current.publishEvent('activeStrategyProcessorChange', 'rowTreeCreation');\n      }\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkGroupingColumnsModelDiff);\n  useGridApiEventHandler(apiRef, 'rowGroupingModelChange', checkGroupingColumnsModelDiff);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.rowGroupingModel !== undefined) {\n      apiRef.current.setRowGroupingModel(props.rowGroupingModel);\n    }\n  }, [apiRef, props.rowGroupingModel]);\n};","map":{"version":3,"names":["_extends","React","MuiDivider","useGridApiEventHandler","useGridApiMethod","gridFilteredDescendantCountLookupSelector","useGridRegisterPipeProcessor","isDeepEqual","gridRowGroupingModelSelector","gridRowGroupingSanitizedModelSelector","getRowGroupingFieldFromGroupingCriteria","ROW_GROUPING_STRATEGY","isGroupingColumn","mergeStateWithRowGroupingModel","setStrategyAvailability","GridRowGroupableColumnMenuItems","GridRowGroupingColumnMenuItems","jsx","_jsx","Divider","onClick","event","stopPropagation","rowGroupingStateInitializer","state","props","apiRef","_ref","_props$rowGroupingMod","_props$initialState","_props$initialState$r","current","unstable_caches","rowGrouping","sanitizedModelOnLastRowTreeCreation","model","rowGroupingModel","initialState","useGridRowGrouping","_props$initialState3","_props$initialState3$","unstable_registerControlState","stateId","propModel","propOnChange","onRowGroupingModelChange","stateSelector","changeEvent","setRowGroupingModel","useCallback","currentModel","setState","disableRowGrouping","forceUpdate","addRowGroupingCriteria","field","groupingIndex","includes","cleanGroupingIndex","length","updatedModel","slice","removeRowGroupingCriteria","filter","el","setRowGroupingCriteriaIndex","targetIndex","currentTargetIndex","indexOf","splice","rowGroupingApi","addColumnMenuButtons","initialValue","column","menuItems","groupable","stateExportPreProcessing","prevState","context","_props$initialState2","_props$initialState2$","rowGroupingModelToExport","shouldExportRowGroupingModel","exportOnlyDirtyModels","Object","keys","stateRestorePreProcessing","params","_context$stateToResto","stateToRestore","handleCellKeyDown","cellParams","getCellParams","id","key","shiftKey","_gridFilteredDescenda","preventDefault","filteredDescendantCount","isOnGroupingCell","rowGroupingColumnMode","rowNode","groupingField","setRowChildrenExpansion","childrenExpanded","checkGroupingColumnsModelDiff","lastGroupingColumnsModelApplied","unstable_requestPipeProcessorsApplication","unstable_getActiveStrategy","publishEvent","useEffect","undefined"],"sources":["C:/Users/Utilizador/OneDrive/Ambiente de Trabalho/SchoolApplication/frontend/node_modules/@mui/x-data-grid-premium/hooks/features/rowGrouping/useGridRowGrouping.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport MuiDivider from '@mui/material/Divider';\nimport { useGridApiEventHandler, useGridApiMethod, gridFilteredDescendantCountLookupSelector } from '@mui/x-data-grid-pro';\nimport { useGridRegisterPipeProcessor, isDeepEqual } from '@mui/x-data-grid-pro/internals';\nimport { gridRowGroupingModelSelector, gridRowGroupingSanitizedModelSelector } from './gridRowGroupingSelector';\nimport { getRowGroupingFieldFromGroupingCriteria, ROW_GROUPING_STRATEGY, isGroupingColumn, mergeStateWithRowGroupingModel, setStrategyAvailability } from './gridRowGroupingUtils';\nimport { GridRowGroupableColumnMenuItems } from '../../../components/GridRowGroupableColumnMenuItems';\nimport { GridRowGroupingColumnMenuItems } from '../../../components/GridRowGroupingColumnMenuItems';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst Divider = () => /*#__PURE__*/_jsx(MuiDivider, {\n  onClick: event => event.stopPropagation()\n});\n\nexport const rowGroupingStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$rowGroupingMod, _props$initialState, _props$initialState$r;\n\n  apiRef.current.unstable_caches.rowGrouping = {\n    sanitizedModelOnLastRowTreeCreation: []\n  };\n  return _extends({}, state, {\n    rowGrouping: {\n      model: (_ref = (_props$rowGroupingMod = props.rowGroupingModel) != null ? _props$rowGroupingMod : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$r = _props$initialState.rowGrouping) == null ? void 0 : _props$initialState$r.model) != null ? _ref : []\n    }\n  });\n};\n/**\n * @requires useGridColumns (state, method) - can be after, async only\n * @requires useGridRows (state, method) - can be after, async only\n * @requires useGridParamsApi (method) - can be after, async only\n */\n\nexport const useGridRowGrouping = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$;\n\n  apiRef.current.unstable_registerControlState({\n    stateId: 'rowGrouping',\n    propModel: props.rowGroupingModel,\n    propOnChange: props.onRowGroupingModelChange,\n    stateSelector: gridRowGroupingModelSelector,\n    changeEvent: 'rowGroupingModelChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setRowGroupingModel = React.useCallback(model => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(model));\n      setStrategyAvailability(apiRef, props.disableRowGrouping);\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  const addRowGroupingCriteria = React.useCallback((field, groupingIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (currentModel.includes(field)) {\n      return;\n    }\n\n    const cleanGroupingIndex = groupingIndex != null ? groupingIndex : currentModel.length;\n    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const removeRowGroupingCriteria = React.useCallback(field => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n\n    if (!currentModel.includes(field)) {\n      return;\n    }\n\n    apiRef.current.setRowGroupingModel(currentModel.filter(el => el !== field));\n  }, [apiRef]);\n  const setRowGroupingCriteriaIndex = React.useCallback((field, targetIndex) => {\n    const currentModel = gridRowGroupingModelSelector(apiRef);\n    const currentTargetIndex = currentModel.indexOf(field);\n\n    if (currentTargetIndex === -1) {\n      return;\n    }\n\n    const updatedModel = [...currentModel];\n    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);\n    apiRef.current.setRowGroupingModel(updatedModel);\n  }, [apiRef]);\n  const rowGroupingApi = {\n    setRowGroupingModel,\n    addRowGroupingCriteria,\n    removeRowGroupingCriteria,\n    setRowGroupingCriteriaIndex\n  };\n  useGridApiMethod(apiRef, rowGroupingApi, 'GridRowGroupingApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addColumnMenuButtons = React.useCallback((initialValue, column) => {\n    if (props.disableRowGrouping) {\n      return initialValue;\n    }\n\n    let menuItems;\n\n    if (isGroupingColumn(column.field)) {\n      menuItems = /*#__PURE__*/_jsx(GridRowGroupingColumnMenuItems, {});\n    } else if (column.groupable) {\n      menuItems = /*#__PURE__*/_jsx(GridRowGroupableColumnMenuItems, {});\n    } else {\n      menuItems = null;\n    }\n\n    if (menuItems == null) {\n      return initialValue;\n    }\n\n    return [...initialValue, /*#__PURE__*/_jsx(Divider, {}), menuItems];\n  }, [props.disableRowGrouping]);\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n\n    const rowGroupingModelToExport = gridRowGroupingModelSelector(apiRef);\n    const shouldExportRowGroupingModel = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.rowGroupingModel != null || // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.rowGrouping) == null ? void 0 : _props$initialState2$.model) != null || // Export if the model is not empty\n    Object.keys(rowGroupingModelToExport).length > 0;\n\n    if (!shouldExportRowGroupingModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      rowGrouping: {\n        model: rowGroupingModelToExport\n      }\n    });\n  }, [apiRef, props.rowGroupingModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.rowGrouping) == null ? void 0 : _props$initialState3$.model]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    if (props.disableRowGrouping) {\n      return params;\n    }\n\n    const rowGroupingModel = (_context$stateToResto = context.stateToRestore.rowGrouping) == null ? void 0 : _context$stateToResto.model;\n\n    if (rowGroupingModel != null) {\n      apiRef.current.setState(mergeStateWithRowGroupingModel(rowGroupingModel));\n    }\n\n    return params;\n  }, [apiRef, props.disableRowGrouping]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (isGroupingColumn(cellParams.field) && event.key === ' ' && !event.shiftKey) {\n      var _gridFilteredDescenda;\n\n      event.stopPropagation();\n      event.preventDefault();\n      const filteredDescendantCount = (_gridFilteredDescenda = gridFilteredDescendantCountLookupSelector(apiRef)[params.id]) != null ? _gridFilteredDescenda : 0;\n      const isOnGroupingCell = props.rowGroupingColumnMode === 'single' || getRowGroupingFieldFromGroupingCriteria(params.rowNode.groupingField) === params.field;\n\n      if (!isOnGroupingCell || filteredDescendantCount === 0) {\n        return;\n      }\n\n      apiRef.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);\n    }\n  }, [apiRef, props.rowGroupingColumnMode]);\n  const checkGroupingColumnsModelDiff = React.useCallback(() => {\n    const rowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef);\n    const lastGroupingColumnsModelApplied = apiRef.current.unstable_caches.rowGrouping.sanitizedModelOnLastRowTreeCreation;\n\n    if (!isDeepEqual(lastGroupingColumnsModelApplied, rowGroupingModel)) {\n      apiRef.current.unstable_caches.rowGrouping.sanitizedModelOnLastRowTreeCreation = rowGroupingModel;\n      apiRef.current.unstable_requestPipeProcessorsApplication('hydrateColumns');\n      setStrategyAvailability(apiRef, props.disableRowGrouping); // Refresh the row tree creation strategy processing\n      // TODO: Add a clean way to re-run a strategy processing without publishing a private event\n\n      if (apiRef.current.unstable_getActiveStrategy('rowTree') === ROW_GROUPING_STRATEGY) {\n        apiRef.current.publishEvent('activeStrategyProcessorChange', 'rowTreeCreation');\n      }\n    }\n  }, [apiRef, props.disableRowGrouping]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'columnsChange', checkGroupingColumnsModelDiff);\n  useGridApiEventHandler(apiRef, 'rowGroupingModelChange', checkGroupingColumnsModelDiff);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.rowGroupingModel !== undefined) {\n      apiRef.current.setRowGroupingModel(props.rowGroupingModel);\n    }\n  }, [apiRef, props.rowGroupingModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}