{"ast":null,"code":"import { passFilterLogic } from '@mui/x-data-grid/internals';\nexport const TREE_DATA_STRATEGY = 'tree-data';\n/**\n * A node is visible if one of the following criteria is met:\n * - One of its children is passing the filter\n * - It is passing the filter\n */\n\nexport const filterRowTreeFromTreeData = params => {\n  const {\n    rowTree,\n    disableChildrenFiltering,\n    isRowMatchingFilters\n  } = params;\n  const visibleRowsLookup = {};\n  const filteredRowsLookup = {};\n  const filteredDescendantCountLookup = {};\n\n  const filterTreeNode = (node, isParentMatchingFilters, areAncestorsExpanded) => {\n    var _node$children;\n\n    const shouldSkipFilters = disableChildrenFiltering && node.depth > 0;\n    let isMatchingFilters;\n\n    if (shouldSkipFilters) {\n      isMatchingFilters = null;\n    } else if (!isRowMatchingFilters || node.position === 'footer') {\n      isMatchingFilters = true;\n    } else {\n      const {\n        passingFilterItems,\n        passingQuickFilterValues\n      } = isRowMatchingFilters(node.id);\n      isMatchingFilters = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel);\n    }\n\n    let filteredDescendantCount = 0;\n    (_node$children = node.children) == null ? void 0 : _node$children.forEach(childId => {\n      var _isMatchingFilters;\n\n      const childNode = rowTree[childId];\n      const childSubTreeSize = filterTreeNode(childNode, (_isMatchingFilters = isMatchingFilters) != null ? _isMatchingFilters : isParentMatchingFilters, areAncestorsExpanded && !!node.childrenExpanded);\n      filteredDescendantCount += childSubTreeSize;\n    });\n    let shouldPassFilters;\n\n    switch (isMatchingFilters) {\n      case true:\n        {\n          shouldPassFilters = true;\n          break;\n        }\n\n      case false:\n        {\n          shouldPassFilters = filteredDescendantCount > 0;\n          break;\n        }\n\n      default:\n        {\n          shouldPassFilters = isParentMatchingFilters;\n          break;\n        }\n    }\n\n    visibleRowsLookup[node.id] = shouldPassFilters && areAncestorsExpanded;\n    filteredRowsLookup[node.id] = shouldPassFilters;\n\n    if (node.footerId != null) {\n      visibleRowsLookup[node.footerId] = shouldPassFilters && areAncestorsExpanded && !!node.childrenExpanded;\n    }\n\n    if (!shouldPassFilters) {\n      return 0;\n    }\n\n    filteredDescendantCountLookup[node.id] = filteredDescendantCount;\n\n    if (node.position === 'footer') {\n      return filteredDescendantCount;\n    }\n\n    return filteredDescendantCount + 1;\n  };\n\n  const nodes = Object.values(rowTree);\n\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n\n    if (node.depth === 0) {\n      filterTreeNode(node, true, true);\n    }\n  }\n\n  return {\n    visibleRowsLookup,\n    filteredRowsLookup,\n    filteredDescendantCountLookup\n  };\n};","map":{"version":3,"names":["passFilterLogic","TREE_DATA_STRATEGY","filterRowTreeFromTreeData","params","rowTree","disableChildrenFiltering","isRowMatchingFilters","visibleRowsLookup","filteredRowsLookup","filteredDescendantCountLookup","filterTreeNode","node","isParentMatchingFilters","areAncestorsExpanded","_node$children","shouldSkipFilters","depth","isMatchingFilters","position","passingFilterItems","passingQuickFilterValues","id","filterModel","filteredDescendantCount","children","forEach","childId","_isMatchingFilters","childNode","childSubTreeSize","childrenExpanded","shouldPassFilters","footerId","nodes","Object","values","i","length"],"sources":["C:/Users/Utilizador/OneDrive/Ambiente de Trabalho/SchoolApplication/frontend/node_modules/@mui/x-data-grid-pro/hooks/features/treeData/gridTreeDataUtils.js"],"sourcesContent":["import { passFilterLogic } from '@mui/x-data-grid/internals';\nexport const TREE_DATA_STRATEGY = 'tree-data';\n/**\n * A node is visible if one of the following criteria is met:\n * - One of its children is passing the filter\n * - It is passing the filter\n */\n\nexport const filterRowTreeFromTreeData = params => {\n  const {\n    rowTree,\n    disableChildrenFiltering,\n    isRowMatchingFilters\n  } = params;\n  const visibleRowsLookup = {};\n  const filteredRowsLookup = {};\n  const filteredDescendantCountLookup = {};\n\n  const filterTreeNode = (node, isParentMatchingFilters, areAncestorsExpanded) => {\n    var _node$children;\n\n    const shouldSkipFilters = disableChildrenFiltering && node.depth > 0;\n    let isMatchingFilters;\n\n    if (shouldSkipFilters) {\n      isMatchingFilters = null;\n    } else if (!isRowMatchingFilters || node.position === 'footer') {\n      isMatchingFilters = true;\n    } else {\n      const {\n        passingFilterItems,\n        passingQuickFilterValues\n      } = isRowMatchingFilters(node.id);\n      isMatchingFilters = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel);\n    }\n\n    let filteredDescendantCount = 0;\n    (_node$children = node.children) == null ? void 0 : _node$children.forEach(childId => {\n      var _isMatchingFilters;\n\n      const childNode = rowTree[childId];\n      const childSubTreeSize = filterTreeNode(childNode, (_isMatchingFilters = isMatchingFilters) != null ? _isMatchingFilters : isParentMatchingFilters, areAncestorsExpanded && !!node.childrenExpanded);\n      filteredDescendantCount += childSubTreeSize;\n    });\n    let shouldPassFilters;\n\n    switch (isMatchingFilters) {\n      case true:\n        {\n          shouldPassFilters = true;\n          break;\n        }\n\n      case false:\n        {\n          shouldPassFilters = filteredDescendantCount > 0;\n          break;\n        }\n\n      default:\n        {\n          shouldPassFilters = isParentMatchingFilters;\n          break;\n        }\n    }\n\n    visibleRowsLookup[node.id] = shouldPassFilters && areAncestorsExpanded;\n    filteredRowsLookup[node.id] = shouldPassFilters;\n\n    if (node.footerId != null) {\n      visibleRowsLookup[node.footerId] = shouldPassFilters && areAncestorsExpanded && !!node.childrenExpanded;\n    }\n\n    if (!shouldPassFilters) {\n      return 0;\n    }\n\n    filteredDescendantCountLookup[node.id] = filteredDescendantCount;\n\n    if (node.position === 'footer') {\n      return filteredDescendantCount;\n    }\n\n    return filteredDescendantCount + 1;\n  };\n\n  const nodes = Object.values(rowTree);\n\n  for (let i = 0; i < nodes.length; i += 1) {\n    const node = nodes[i];\n\n    if (node.depth === 0) {\n      filterTreeNode(node, true, true);\n    }\n  }\n\n  return {\n    visibleRowsLookup,\n    filteredRowsLookup,\n    filteredDescendantCountLookup\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}