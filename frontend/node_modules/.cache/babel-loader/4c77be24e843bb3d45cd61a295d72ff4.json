{"ast":null,"code":"import { useGridInitialization, useGridInitializeState, useGridClipboard, useGridColumnMenu, useGridColumns, columnsStateInitializer, useGridDensity, useGridCsvExport, useGridPrintExport, useGridFilter, filterStateInitializer, useGridFocus, useGridKeyboardNavigation, useGridPagination, paginationStateInitializer, useGridPreferencesPanel, useGridEditing_new, useGridEditing_old, editingStateInitializer_old, editingStateInitializer_new, useGridRows, useGridRowsPreProcessors, rowsStateInitializer, useGridRowsMeta, useGridParamsApi, useGridSelection, useGridSorting, sortingStateInitializer, useGridScroll, useGridEvents, useGridDimensions, useGridStatePersistence, useGridSelectionPreProcessors, useGridColumnSpanning, columnMenuStateInitializer, densityStateInitializer, focusStateInitializer, preferencePanelStateInitializer, rowsMetaStateInitializer, selectionStateInitializer, useGridColumnGrouping, columnGroupsStateInitializer, useGridColumnGroupingPreProcessors } from '@mui/x-data-grid/internals'; // Pro-only features\n\nimport { useGridInfiniteLoader } from '../hooks/features/infiniteLoader/useGridInfiniteLoader';\nimport { useGridColumnReorder, columnReorderStateInitializer } from '../hooks/features/columnReorder/useGridColumnReorder';\nimport { useGridColumnResize, columnResizeStateInitializer } from '../hooks/features/columnResize/useGridColumnResize';\nimport { useGridTreeData } from '../hooks/features/treeData/useGridTreeData';\nimport { useGridTreeDataPreProcessors } from '../hooks/features/treeData/useGridTreeDataPreProcessors';\nimport { useGridColumnPinning, columnPinningStateInitializer } from '../hooks/features/columnPinning/useGridColumnPinning';\nimport { useGridColumnPinningPreProcessors } from '../hooks/features/columnPinning/useGridColumnPinningPreProcessors';\nimport { useGridDetailPanel, detailPanelStateInitializer } from '../hooks/features/detailPanel/useGridDetailPanel';\nimport { useGridDetailPanelPreProcessors } from '../hooks/features/detailPanel/useGridDetailPanelPreProcessors';\nimport { useGridRowReorder } from '../hooks/features/rowReorder/useGridRowReorder';\nimport { useGridRowReorderPreProcessors } from '../hooks/features/rowReorder/useGridRowReorderPreProcessors';\nimport { useGridRowPinning, rowPinningStateInitializer } from '../hooks/features/rowPinning/useGridRowPinning';\nimport { useGridRowPinningPreProcessors } from '../hooks/features/rowPinning/useGridRowPinningPreProcessors';\nexport const useDataGridProComponent = (inputApiRef, props) => {\n  var _props$experimentalFe, _props$experimentalFe2;\n\n  const apiRef = useGridInitialization(inputApiRef, props);\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n\n  useGridColumnGroupingPreProcessors(apiRef, props);\n  useGridSelectionPreProcessors(apiRef, props);\n  useGridRowReorderPreProcessors(apiRef, props);\n  useGridTreeDataPreProcessors(apiRef, props);\n  useGridRowPinningPreProcessors(apiRef);\n  useGridDetailPanelPreProcessors(apiRef, props); // The column pinning `hydrateColumns` pre-processor must be after every other `hydrateColumns` pre-processors\n  // Because it changes the order of the columns.\n\n  useGridColumnPinningPreProcessors(apiRef, props);\n  useGridRowsPreProcessors(apiRef);\n  /**\n   * Register all state initializers here.\n   */\n\n  useGridInitializeState(selectionStateInitializer, apiRef, props);\n  useGridInitializeState(detailPanelStateInitializer, apiRef, props);\n  useGridInitializeState(columnPinningStateInitializer, apiRef, props);\n  useGridInitializeState(columnsStateInitializer, apiRef, props);\n  useGridInitializeState(rowPinningStateInitializer, apiRef, props);\n  useGridInitializeState(rowsStateInitializer, apiRef, props);\n  useGridInitializeState((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.newEditingApi ? editingStateInitializer_new : editingStateInitializer_old, apiRef, props);\n  useGridInitializeState(focusStateInitializer, apiRef, props);\n  useGridInitializeState(sortingStateInitializer, apiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);\n  useGridInitializeState(filterStateInitializer, apiRef, props);\n  useGridInitializeState(densityStateInitializer, apiRef, props);\n  useGridInitializeState(columnReorderStateInitializer, apiRef, props);\n  useGridInitializeState(columnResizeStateInitializer, apiRef, props);\n  useGridInitializeState(paginationStateInitializer, apiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, apiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);\n  useGridTreeData(apiRef);\n  useGridKeyboardNavigation(apiRef, props);\n  useGridSelection(apiRef, props);\n  useGridColumnPinning(apiRef, props);\n  useGridRowPinning(apiRef, props);\n  useGridColumns(apiRef, props);\n  useGridRows(apiRef, props);\n  useGridParamsApi(apiRef);\n  useGridDetailPanel(apiRef, props);\n  useGridColumnSpanning(apiRef);\n  useGridColumnGrouping(apiRef, props);\n  const useGridEditing = (_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.newEditingApi ? useGridEditing_new : useGridEditing_old;\n  useGridEditing(apiRef, props);\n  useGridFocus(apiRef, props);\n  useGridPreferencesPanel(apiRef, props);\n  useGridFilter(apiRef, props);\n  useGridSorting(apiRef, props);\n  useGridDensity(apiRef, props);\n  useGridColumnReorder(apiRef, props);\n  useGridColumnResize(apiRef, props);\n  useGridPagination(apiRef, props);\n  useGridRowsMeta(apiRef, props);\n  useGridRowReorder(apiRef, props);\n  useGridScroll(apiRef, props);\n  useGridInfiniteLoader(apiRef, props);\n  useGridColumnMenu(apiRef);\n  useGridCsvExport(apiRef);\n  useGridPrintExport(apiRef, props);\n  useGridClipboard(apiRef);\n  useGridDimensions(apiRef, props);\n  useGridEvents(apiRef, props);\n  useGridStatePersistence(apiRef);\n  return apiRef;\n};","map":{"version":3,"names":["useGridInitialization","useGridInitializeState","useGridClipboard","useGridColumnMenu","useGridColumns","columnsStateInitializer","useGridDensity","useGridCsvExport","useGridPrintExport","useGridFilter","filterStateInitializer","useGridFocus","useGridKeyboardNavigation","useGridPagination","paginationStateInitializer","useGridPreferencesPanel","useGridEditing_new","useGridEditing_old","editingStateInitializer_old","editingStateInitializer_new","useGridRows","useGridRowsPreProcessors","rowsStateInitializer","useGridRowsMeta","useGridParamsApi","useGridSelection","useGridSorting","sortingStateInitializer","useGridScroll","useGridEvents","useGridDimensions","useGridStatePersistence","useGridSelectionPreProcessors","useGridColumnSpanning","columnMenuStateInitializer","densityStateInitializer","focusStateInitializer","preferencePanelStateInitializer","rowsMetaStateInitializer","selectionStateInitializer","useGridColumnGrouping","columnGroupsStateInitializer","useGridColumnGroupingPreProcessors","useGridInfiniteLoader","useGridColumnReorder","columnReorderStateInitializer","useGridColumnResize","columnResizeStateInitializer","useGridTreeData","useGridTreeDataPreProcessors","useGridColumnPinning","columnPinningStateInitializer","useGridColumnPinningPreProcessors","useGridDetailPanel","detailPanelStateInitializer","useGridDetailPanelPreProcessors","useGridRowReorder","useGridRowReorderPreProcessors","useGridRowPinning","rowPinningStateInitializer","useGridRowPinningPreProcessors","useDataGridProComponent","inputApiRef","props","_props$experimentalFe","_props$experimentalFe2","apiRef","experimentalFeatures","newEditingApi","useGridEditing"],"sources":["C:/Users/Utilizador/OneDrive/Ambiente de Trabalho/SchoolApplication/frontend/node_modules/@mui/x-data-grid-pro/DataGridPro/useDataGridProComponent.js"],"sourcesContent":["import { useGridInitialization, useGridInitializeState, useGridClipboard, useGridColumnMenu, useGridColumns, columnsStateInitializer, useGridDensity, useGridCsvExport, useGridPrintExport, useGridFilter, filterStateInitializer, useGridFocus, useGridKeyboardNavigation, useGridPagination, paginationStateInitializer, useGridPreferencesPanel, useGridEditing_new, useGridEditing_old, editingStateInitializer_old, editingStateInitializer_new, useGridRows, useGridRowsPreProcessors, rowsStateInitializer, useGridRowsMeta, useGridParamsApi, useGridSelection, useGridSorting, sortingStateInitializer, useGridScroll, useGridEvents, useGridDimensions, useGridStatePersistence, useGridSelectionPreProcessors, useGridColumnSpanning, columnMenuStateInitializer, densityStateInitializer, focusStateInitializer, preferencePanelStateInitializer, rowsMetaStateInitializer, selectionStateInitializer, useGridColumnGrouping, columnGroupsStateInitializer, useGridColumnGroupingPreProcessors } from '@mui/x-data-grid/internals';\n// Pro-only features\nimport { useGridInfiniteLoader } from '../hooks/features/infiniteLoader/useGridInfiniteLoader';\nimport { useGridColumnReorder, columnReorderStateInitializer } from '../hooks/features/columnReorder/useGridColumnReorder';\nimport { useGridColumnResize, columnResizeStateInitializer } from '../hooks/features/columnResize/useGridColumnResize';\nimport { useGridTreeData } from '../hooks/features/treeData/useGridTreeData';\nimport { useGridTreeDataPreProcessors } from '../hooks/features/treeData/useGridTreeDataPreProcessors';\nimport { useGridColumnPinning, columnPinningStateInitializer } from '../hooks/features/columnPinning/useGridColumnPinning';\nimport { useGridColumnPinningPreProcessors } from '../hooks/features/columnPinning/useGridColumnPinningPreProcessors';\nimport { useGridDetailPanel, detailPanelStateInitializer } from '../hooks/features/detailPanel/useGridDetailPanel';\nimport { useGridDetailPanelPreProcessors } from '../hooks/features/detailPanel/useGridDetailPanelPreProcessors';\nimport { useGridRowReorder } from '../hooks/features/rowReorder/useGridRowReorder';\nimport { useGridRowReorderPreProcessors } from '../hooks/features/rowReorder/useGridRowReorderPreProcessors';\nimport { useGridRowPinning, rowPinningStateInitializer } from '../hooks/features/rowPinning/useGridRowPinning';\nimport { useGridRowPinningPreProcessors } from '../hooks/features/rowPinning/useGridRowPinningPreProcessors';\nexport const useDataGridProComponent = (inputApiRef, props) => {\n  var _props$experimentalFe, _props$experimentalFe2;\n\n  const apiRef = useGridInitialization(inputApiRef, props);\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n\n  useGridColumnGroupingPreProcessors(apiRef, props);\n  useGridSelectionPreProcessors(apiRef, props);\n  useGridRowReorderPreProcessors(apiRef, props);\n  useGridTreeDataPreProcessors(apiRef, props);\n  useGridRowPinningPreProcessors(apiRef);\n  useGridDetailPanelPreProcessors(apiRef, props); // The column pinning `hydrateColumns` pre-processor must be after every other `hydrateColumns` pre-processors\n  // Because it changes the order of the columns.\n\n  useGridColumnPinningPreProcessors(apiRef, props);\n  useGridRowsPreProcessors(apiRef);\n  /**\n   * Register all state initializers here.\n   */\n\n  useGridInitializeState(selectionStateInitializer, apiRef, props);\n  useGridInitializeState(detailPanelStateInitializer, apiRef, props);\n  useGridInitializeState(columnPinningStateInitializer, apiRef, props);\n  useGridInitializeState(columnsStateInitializer, apiRef, props);\n  useGridInitializeState(rowPinningStateInitializer, apiRef, props);\n  useGridInitializeState(rowsStateInitializer, apiRef, props);\n  useGridInitializeState((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.newEditingApi ? editingStateInitializer_new : editingStateInitializer_old, apiRef, props);\n  useGridInitializeState(focusStateInitializer, apiRef, props);\n  useGridInitializeState(sortingStateInitializer, apiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);\n  useGridInitializeState(filterStateInitializer, apiRef, props);\n  useGridInitializeState(densityStateInitializer, apiRef, props);\n  useGridInitializeState(columnReorderStateInitializer, apiRef, props);\n  useGridInitializeState(columnResizeStateInitializer, apiRef, props);\n  useGridInitializeState(paginationStateInitializer, apiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, apiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);\n  useGridTreeData(apiRef);\n  useGridKeyboardNavigation(apiRef, props);\n  useGridSelection(apiRef, props);\n  useGridColumnPinning(apiRef, props);\n  useGridRowPinning(apiRef, props);\n  useGridColumns(apiRef, props);\n  useGridRows(apiRef, props);\n  useGridParamsApi(apiRef);\n  useGridDetailPanel(apiRef, props);\n  useGridColumnSpanning(apiRef);\n  useGridColumnGrouping(apiRef, props);\n  const useGridEditing = (_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.newEditingApi ? useGridEditing_new : useGridEditing_old;\n  useGridEditing(apiRef, props);\n  useGridFocus(apiRef, props);\n  useGridPreferencesPanel(apiRef, props);\n  useGridFilter(apiRef, props);\n  useGridSorting(apiRef, props);\n  useGridDensity(apiRef, props);\n  useGridColumnReorder(apiRef, props);\n  useGridColumnResize(apiRef, props);\n  useGridPagination(apiRef, props);\n  useGridRowsMeta(apiRef, props);\n  useGridRowReorder(apiRef, props);\n  useGridScroll(apiRef, props);\n  useGridInfiniteLoader(apiRef, props);\n  useGridColumnMenu(apiRef);\n  useGridCsvExport(apiRef);\n  useGridPrintExport(apiRef, props);\n  useGridClipboard(apiRef);\n  useGridDimensions(apiRef, props);\n  useGridEvents(apiRef, props);\n  useGridStatePersistence(apiRef);\n  return apiRef;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}