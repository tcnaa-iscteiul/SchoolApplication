{"ast":null,"code":"import { gridColumnLookupSelector, gridFilteredRowsLookupSelector, gridRowIdsSelector, gridRowTreeSelector } from '@mui/x-data-grid-pro';\nimport { getAggregationRules } from './gridAggregationUtils';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\n\nconst getAggregationCellValue = _ref => {\n  let {\n    apiRef,\n    groupId,\n    field,\n    aggregationFunction,\n    aggregationRowsScope\n  } = _ref;\n  const rowTree = gridRowTreeSelector(apiRef);\n  const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n  let rowIds; // TODO: Add custom root id\n\n  if (groupId === '') {\n    rowIds = gridRowIdsSelector(apiRef).filter(rowId => !rowTree[rowId].isAutoGenerated);\n  } else {\n    rowIds = apiRef.current.getRowGroupChildren({\n      groupId\n    });\n  }\n\n  const values = [];\n  rowIds.forEach(rowId => {\n    if (aggregationRowsScope === 'filtered' && filteredRowsLookup[rowId] === false) {\n      return;\n    }\n\n    values.push(apiRef.current.getCellValue(rowId, field));\n  });\n  return aggregationFunction.apply({\n    values\n  });\n};\n\nconst getGroupAggregatedValue = _ref2 => {\n  let {\n    groupId,\n    apiRef,\n    aggregationRowsScope,\n    aggregatedFields,\n    aggregationRules,\n    position\n  } = _ref2;\n  const groupAggregationLookup = {};\n\n  for (let j = 0; j < aggregatedFields.length; j += 1) {\n    const aggregatedField = aggregatedFields[j];\n    const columnAggregationRules = aggregationRules[aggregatedField];\n    groupAggregationLookup[aggregatedField] = {\n      position,\n      value: getAggregationCellValue({\n        apiRef,\n        groupId,\n        field: aggregatedField,\n        aggregationFunction: columnAggregationRules.aggregationFunction,\n        aggregationRowsScope\n      })\n    };\n  }\n\n  return groupAggregationLookup;\n};\n\nexport const createAggregationLookup = _ref3 => {\n  let {\n    apiRef,\n    aggregationFunctions,\n    aggregationRowsScope,\n    getAggregationPosition\n  } = _ref3;\n  const aggregationRules = getAggregationRules({\n    columnsLookup: gridColumnLookupSelector(apiRef),\n    aggregationModel: gridAggregationModelSelector(apiRef),\n    aggregationFunctions\n  });\n  const aggregatedFields = Object.keys(aggregationRules);\n\n  if (aggregatedFields.length === 0) {\n    return {};\n  }\n\n  const aggregationLookup = {};\n  const rowIds = gridRowIdsSelector(apiRef);\n  const rowTree = gridRowTreeSelector(apiRef);\n\n  for (let i = 0; i < rowIds.length; i += 1) {\n    var _node$children;\n\n    const rowId = rowIds[i];\n    const node = rowTree[rowId];\n    const hasChildren = (_node$children = node.children) == null ? void 0 : _node$children.some(childId => {\n      var _rowTree$childId$posi;\n\n      return ((_rowTree$childId$posi = rowTree[childId].position) != null ? _rowTree$childId$posi : 'body') === 'body';\n    });\n\n    if (hasChildren) {\n      const position = getAggregationPosition(node);\n\n      if (position != null) {\n        aggregationLookup[rowId] = getGroupAggregatedValue({\n          groupId: rowId,\n          apiRef,\n          aggregatedFields,\n          aggregationRowsScope,\n          aggregationRules,\n          position\n        });\n      }\n    }\n  } // TODO: Add custom root id\n\n\n  const position = getAggregationPosition(null);\n\n  if (position != null) {\n    aggregationLookup[''] = getGroupAggregatedValue({\n      groupId: '',\n      apiRef,\n      aggregatedFields,\n      aggregationRowsScope,\n      aggregationRules,\n      position\n    });\n  }\n\n  return aggregationLookup;\n};","map":{"version":3,"names":["gridColumnLookupSelector","gridFilteredRowsLookupSelector","gridRowIdsSelector","gridRowTreeSelector","getAggregationRules","gridAggregationModelSelector","getAggregationCellValue","apiRef","groupId","field","aggregationFunction","aggregationRowsScope","rowTree","filteredRowsLookup","rowIds","filter","rowId","isAutoGenerated","current","getRowGroupChildren","values","forEach","push","getCellValue","apply","getGroupAggregatedValue","aggregatedFields","aggregationRules","position","groupAggregationLookup","j","length","aggregatedField","columnAggregationRules","value","createAggregationLookup","aggregationFunctions","getAggregationPosition","columnsLookup","aggregationModel","Object","keys","aggregationLookup","i","_node$children","node","hasChildren","children","some","childId","_rowTree$childId$posi"],"sources":["C:/Users/Utilizador/OneDrive/Ambiente de Trabalho/SchoolApplication/frontend/node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/createAggregationLookup.js"],"sourcesContent":["import { gridColumnLookupSelector, gridFilteredRowsLookupSelector, gridRowIdsSelector, gridRowTreeSelector } from '@mui/x-data-grid-pro';\nimport { getAggregationRules } from './gridAggregationUtils';\nimport { gridAggregationModelSelector } from './gridAggregationSelectors';\n\nconst getAggregationCellValue = ({\n  apiRef,\n  groupId,\n  field,\n  aggregationFunction,\n  aggregationRowsScope\n}) => {\n  const rowTree = gridRowTreeSelector(apiRef);\n  const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n  let rowIds; // TODO: Add custom root id\n\n  if (groupId === '') {\n    rowIds = gridRowIdsSelector(apiRef).filter(rowId => !rowTree[rowId].isAutoGenerated);\n  } else {\n    rowIds = apiRef.current.getRowGroupChildren({\n      groupId\n    });\n  }\n\n  const values = [];\n  rowIds.forEach(rowId => {\n    if (aggregationRowsScope === 'filtered' && filteredRowsLookup[rowId] === false) {\n      return;\n    }\n\n    values.push(apiRef.current.getCellValue(rowId, field));\n  });\n  return aggregationFunction.apply({\n    values\n  });\n};\n\nconst getGroupAggregatedValue = ({\n  groupId,\n  apiRef,\n  aggregationRowsScope,\n  aggregatedFields,\n  aggregationRules,\n  position\n}) => {\n  const groupAggregationLookup = {};\n\n  for (let j = 0; j < aggregatedFields.length; j += 1) {\n    const aggregatedField = aggregatedFields[j];\n    const columnAggregationRules = aggregationRules[aggregatedField];\n    groupAggregationLookup[aggregatedField] = {\n      position,\n      value: getAggregationCellValue({\n        apiRef,\n        groupId,\n        field: aggregatedField,\n        aggregationFunction: columnAggregationRules.aggregationFunction,\n        aggregationRowsScope\n      })\n    };\n  }\n\n  return groupAggregationLookup;\n};\n\nexport const createAggregationLookup = ({\n  apiRef,\n  aggregationFunctions,\n  aggregationRowsScope,\n  getAggregationPosition\n}) => {\n  const aggregationRules = getAggregationRules({\n    columnsLookup: gridColumnLookupSelector(apiRef),\n    aggregationModel: gridAggregationModelSelector(apiRef),\n    aggregationFunctions\n  });\n  const aggregatedFields = Object.keys(aggregationRules);\n\n  if (aggregatedFields.length === 0) {\n    return {};\n  }\n\n  const aggregationLookup = {};\n  const rowIds = gridRowIdsSelector(apiRef);\n  const rowTree = gridRowTreeSelector(apiRef);\n\n  for (let i = 0; i < rowIds.length; i += 1) {\n    var _node$children;\n\n    const rowId = rowIds[i];\n    const node = rowTree[rowId];\n    const hasChildren = (_node$children = node.children) == null ? void 0 : _node$children.some(childId => {\n      var _rowTree$childId$posi;\n\n      return ((_rowTree$childId$posi = rowTree[childId].position) != null ? _rowTree$childId$posi : 'body') === 'body';\n    });\n\n    if (hasChildren) {\n      const position = getAggregationPosition(node);\n\n      if (position != null) {\n        aggregationLookup[rowId] = getGroupAggregatedValue({\n          groupId: rowId,\n          apiRef,\n          aggregatedFields,\n          aggregationRowsScope,\n          aggregationRules,\n          position\n        });\n      }\n    }\n  } // TODO: Add custom root id\n\n\n  const position = getAggregationPosition(null);\n\n  if (position != null) {\n    aggregationLookup[''] = getGroupAggregatedValue({\n      groupId: '',\n      apiRef,\n      aggregatedFields,\n      aggregationRowsScope,\n      aggregationRules,\n      position\n    });\n  }\n\n  return aggregationLookup;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}